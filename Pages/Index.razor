@page "/"
@inject Server_Calculator.Data.CalculatorContext DataContext
@using Server_Calculator.Models
@using System.Threading.Tasks


<PageTitle>Home</PageTitle>

<p class="h5">First</p>


<div class="input-group flex-nowrap">

    <input type="number" class="form-control"  placeholder="First Number" aria-describedby="addon-wrapping" @bind=FirstInput>
</div>


<div class="d-flex flex-row justify-content-center align-items-center gap-3 py-3">
    <button type="button" class="btn btn-primary" style="margin:20px; padding:10px 20px;" @onclick=addNum>+</button>
    <button type="button" class="btn btn-primary" style="margin:20px; padding:10px 20px;" @onclick=subNum>-</button>
    <button type="button" class="btn btn-primary" style="margin:20px; padding:10px 20px;" @onclick=mulNum>*</button>
    <button type="button" class="btn btn-primary" style="margin:20px; padding:10px 20px;" @onclick=divNum>/</button>
    <button type="button" class="btn btn-success" style="margin:20px; padding:10px 20px;" @onclick=isEqual>=</button>
    <button type="button" class="btn btn-warning" style="margin:20px; padding:10px 20px;" @onclick=refresh>c</button>
</div>


<p class="h5">Second</p>


<div class="input-group flex-nowrap">

    <input type="number" class="form-control" placeholder="Second Number" aria-describedby="addon-wrapping" @bind=SecondInput>
</div>


<div class="d-grid gap-2 col-3 mx-auto" style="margin-top : 50px;">
    <p>Result: @result </p>
    <p>History: @FullData</p>
    <button type="button" class="btn btn-success" @onclick=savedData>SAVE</button>
</div>




@code {

    string operation = "";
    double FirstInput;
    double SecondInput;
    double result;
   
    string FullData = "";
    bool isFirstint = true;




    private void addNum()
    {
        if (isFirstint)
        {
            operation = "+";
            result = FirstInput;
            isFirstint = false;
        }
        else
        {
            result = FirstInput + SecondInput;
            FullData = FirstInput + " + " + SecondInput + " = " +result;
        }
    }

    private void subNum()
    {
        if (isFirstint)
        {
            operation = "-";
            result = FirstInput;
            isFirstint = false;
        }
        else
        {
            result = FirstInput - SecondInput;
            FullData = FirstInput + " - " + SecondInput + " = " + result;
        }
    }

    private void mulNum()
    {
        if (isFirstint)
        {
            operation = "*";
            result = FirstInput;
            isFirstint = false;
        }
        else
        {
            result = FirstInput * SecondInput;
            FullData = FirstInput + " x " + SecondInput + " = " + result;
        }
    }

    private void divNum()
    {
        if (isFirstint)
        {
            operation = "/";
            result = FirstInput;
            isFirstint = false;
        }
        else
        {
            if(SecondInput != 0)
            {
                result = FirstInput / SecondInput;
                FullData = FirstInput + " / " + SecondInput + " = " + result;
            }
            else
            {
                FullData = "Numbers divided by 0 cannot be saved!";
            }

        }
    }

    private void isEqual()
    {
        switch (operation)
        {
            case "+":
                addNum();
                break;
            case "-":
                subNum();
                break;
            case "*":
                mulNum();
                break;
            case "/":
                divNum();
                break;
            default:
                break;
        }
        isFirstint = true;
    }

    private void refresh()
    {
        isFirstint = true;
        FirstInput = 0;
        SecondInput = 0;
        result = 0;
        FullData = "";
    }

    //Method pour ajouter chaque calcul dans la base de donnees  en clickant sur le button "Save"
    public async Task savedData()
    {
        if (FullData != "")
        {
            var saveData = new Calculatrice
                {
                    Number1 = FirstInput,
                    Operator = operation,
                    Number2 = SecondInput,
                    Result = result
                };

          

            DataContext.Calculatrice_Saved.Add(saveData);
            await DataContext.SaveChangesAsync();

            
            refresh();
        }
    }

}